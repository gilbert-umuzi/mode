/* 
#SQL Query: Engagement Metrics by Week in Yammer Sessions
This SQL query is designed to analyze user engagement metrics in Yammer sessions on a weekly basis. The aim is to track the frequency of different types of search-related activities within each session, segmented into weekly intervals. The query focuses on three key engagement metrics: the use of the search autocomplete feature, search query executions ('runs'), and clicks on search results.

##Query Breakdown:

###Inner Query:
Identifies individual user sessions and categorizes engagement events like 'search_autocomplete', 'search_run', and 'search_click_%'.
Sessions are defined by user activity with a 10-minute inactivity threshold marking the end of a session.

###Middle Query:
Aggregates the counts of autocomplete, search runs, and clicks for each session.

###Outer Query:
Groups data by week using DATE_TRUNC.
Calculates the proportion of sessions with autocompletes, search runs, and clicks out of the total sessions.

##Objective:
The query aims to provide insights into how users are interacting with the search functionality in Yammer over time, highlighting patterns or trends in user engagement with the search tool on a weekly basis. 

##Data:
The data is sourced from the 'tutorial.yammer_events' table and analyzed using a combination of JOIN operations and aggregate functions.
*/



SELECT DATE_TRUNC('week',z.session_start) AS week,
       COUNT(CASE WHEN z.autocompletes > 0 THEN z.session ELSE NULL END)::FLOAT / COUNT(*)::FLOAT AS with_autocompletes,
       COUNT(CASE WHEN z.runs > 0 THEN z.session ELSE NULL END)::FLOAT / COUNT(*)::FLOAT AS with_runs,
       COUNT(CASE WHEN z.clicks > 0 THEN z.session ELSE NULL END)::FLOAT / COUNT(*)::FLOAT AS with_clicks
  FROM (
SELECT x.session_start,
       x.session,
       x.user_id,
       COUNT(CASE WHEN x.event_name = 'search_autocomplete' THEN x.user_id ELSE NULL END) AS autocompletes,
       COUNT(CASE WHEN x.event_name = 'search_run' THEN x.user_id ELSE NULL END) AS runs,
       COUNT(CASE WHEN x.event_name LIKE 'search_click_%' THEN x.user_id ELSE NULL END) AS clicks
  FROM (
SELECT e.*,
       session.session,
       session.session_start
  FROM tutorial.yammer_events e
  LEFT JOIN (
       SELECT user_id,
              session,
              MIN(occurred_at) AS session_start,
              MAX(occurred_at) AS session_end
         FROM (
              SELECT bounds.*,
              		    CASE WHEN last_event >= INTERVAL '10 MINUTE' THEN id
              		         WHEN last_event IS NULL THEN id
              		         ELSE LAG(id,1) OVER (PARTITION BY user_id ORDER BY occurred_at) END AS session
                FROM (
                     SELECT user_id,
                            event_type,
                            event_name,
                            occurred_at,
                            occurred_at - LAG(occurred_at,1) OVER (PARTITION BY user_id ORDER BY occurred_at) AS last_event,
                            LEAD(occurred_at,1) OVER (PARTITION BY user_id ORDER BY occurred_at) - occurred_at AS next_event,
                            ROW_NUMBER() OVER () AS id
                       FROM tutorial.yammer_events e
                      WHERE e.event_type = 'engagement'
                      ORDER BY user_id,occurred_at
                     ) bounds
               WHERE last_event >= INTERVAL '10 MINUTE'
                  OR next_event >= INTERVAL '10 MINUTE'
               	 OR last_event IS NULL
              	 	 OR next_event IS NULL   
              ) final
        GROUP BY 1,2
       ) session
    ON e.user_id = session.user_id
   AND e.occurred_at >= session.session_start
   AND e.occurred_at <= session.session_end
 WHERE e.event_type = 'engagement'
       ) x
 GROUP BY 1,2,3
       ) z
 GROUP BY 1
 ORDER BY 1
